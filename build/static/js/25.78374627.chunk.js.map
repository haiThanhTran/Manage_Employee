{"version":3,"sources":["app/views/AdministrativeUnit/AdministrativeUnitService.js","app/views/AdministrativeUnit/AdministrativeUnitEditorDialog.jsx","app/views/AdministrativeUnit/React15TabulatorSample.js"],"names":["getByPage","searchDto","url","ConstantList","API_ENPOINT","axios","post","checkCode","id","code","config","params","get","getUserById","deleteAdministrativeUnit","delete","addNewAdministrativeUnit","adminUnit","updateAdministrativeUnit","PaperComponent","props","React","createElement","Draggable","handle","cancel","Paper","toast","configure","autoClose","draggable","limit","AdministrativeUnitEditorDialog","_Component","_getPrototypeOf2","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_possibleConstructorReturn","_getPrototypeOf","call","apply","concat","state","name","level","isActive","loading","handleChange","event","source","persist","setState","target","value","checked","openCircularProgress","handleFormSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this$state","t","wrap","_context","prev","next","then","result","data","console","log","warning","_objectSpread","success","response","status","stop","_inherits","_createClass","key","_this$props","this","item","open","handleClose","_this2","_this$props2","handleOKEditClose","_this$state2","i18n","Dialog","maxWidth","fullWidth","className","clsx","CircularProgress","size","DialogTitle","style","cursor","IconButton","position","right","top","onClick","Icon","color","title","ValidatorForm","ref","onSubmit","overflowY","display","flexDirection","DialogContent","dividers","Grid","container","spacing","sm","xs","TextValidator","label","onChange","type","validators","errorMessages","variant","DialogActions","Button","Component","SimpleButton","_useTranslation","useTranslation","cellData","cell","_cell","row","onSelect","React15TabulatorSample","_React$Component","rowsPerPage","page","totalElements","administrativeList","shouldOpenEditorDialog","shouldOpenConfirmationDialog","setPage","setRowsPerPage","updatePageData","handleChangePage","newPage","handleDownload","blob","Blob","saveAs","handleDialogClose","handleDeleteAdministrativeUnit","handleConfirmationResponse","handleEditItem","pageIndex","pageSize","_ref","_toConsumableArray","content","rowClick","e","table","setData","clearData","GetColumns","col","getData","selectedName","columns","field","width","align","formatter","reactFormatter","method","selectedItem","ConfirmationDialog","onConfirmDialogClose","onYesClick","text","React15Tabulator","options","height","movableRows","data-custom-attr","resizableColumns","movableColumns","scrollToColumnIfVisible","selectableRollingSelection","TablePagination","rowsPerPageOptions","component","count","backIconButtonProps","nextIconButtonProps","onChangePage","onChangeRowsPerPage"],"mappings":"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","file":"static/js/25.78374627.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport ConstantList from \"../../appConfig\";\r\nexport const getAllAdministrativeUnits = () => {\r\n  //return axios.get(\"/api/user/all\");\r\n  //alert( axios.defaults.headers.common[\"Authorization\"]);\r\n  return axios.get(ConstantList.API_ENPOINT + \"/api/administrativeunit/1/10\");\r\n  //return axios.get(ConstantList.API_ENPOINT+\"/public/animal/1/10\");  \r\n};\r\n\r\n// export const getByPage = (searchDto) => {\r\n//   var url = ConstantList.API_ENPOINT + \"/api/administrativeunit/\" + searchDto.pageIndex + '/' + searchDto.pageSize;\r\n//   return axios.get(url);\r\n// };\r\n\r\nexport const getByPage = (searchDto) => {\r\n  var url = ConstantList.API_ENPOINT + \"/api/AdministrativeUnit/searchByDto\" ;\r\n  return axios.post(url, searchDto);\r\n};\r\n\r\nexport const checkCode = (id, code) => {\r\n  const config = { params: {id: id, code: code } };\r\n  var url = ConstantList.API_ENPOINT+\"/api/AdministrativeUnit/checkCode\";\r\n  return axios.get(url, config);\r\n};\r\n\r\nexport const getByPage1 = (searchDto) => {\r\n  var url = ConstantList.API_ENPOINT + \"/api/administrativeunit\" \r\n  return axios.get(url, searchDto);\r\n};\r\n\r\nexport const getUserById = id => {\r\n  var url = ConstantList.API_ENPOINT+ \"/api/administrativeunit/\" + id;\r\n  return axios.get(url);\r\n};\r\nexport const deleteAdministrativeUnit = id => {\r\n  return axios.delete(ConstantList.API_ENPOINT + \"/api/administrativeunit/\" + id);\r\n};\r\nexport const addNewAdministrativeUnit = adminUnit => {\r\n  return axios.post(ConstantList.API_ENPOINT + \"/api/administrativeunit\", adminUnit);\r\n};\r\nexport const updateAdministrativeUnit = adminUnit => {\r\n\r\n  return axios.post(ConstantList.API_ENPOINT + \"/api/administrativeunit\", adminUnit);\r\n};\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  FormControlLabel,\r\n  Switch,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions, Icon, IconButton\r\n} from \"@material-ui/core\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport { getUserById, updateUser, addNewAdministrativeUnit,updateAdministrativeUnit, checkCode } from \"./AdministrativeUnitService\";\r\nimport { generateRandomId } from \"utils\";\r\nimport Draggable from 'react-draggable';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../../styles/views/_loadding.scss';\r\nimport '../../../styles/views/_style.scss';\r\n\r\nimport clsx from 'clsx';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit:3\r\n});\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nclass AdministrativeUnitEditorDialog extends Component {\r\n  state = {\r\n    name: \"\",\r\n    code: \"\",\r\n    level:0,\r\n    isActive: false,\r\n    loading:false\r\n  };\r\n\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n  openCircularProgress = () => {\r\n    this.setState({ loading: true });\r\n  };\r\n\r\n  handleFormSubmit = async () => {\r\n    await this.openCircularProgress();\r\n    let { id, code } = this.state;\r\n    let { t } = this.props;\r\n    checkCode(id, code).then((result) => {\r\n      //Nếu trả về true là code đã được sử dụng\r\n      if (result.data) {\r\n        console.log(\"Code đã được sử dụng\");\r\n        toast.warning(t('mess_code'));\r\n        this.setState({loading:false})\r\n      } else {\r\n        if (id) {\r\n          updateAdministrativeUnit({\r\n            ...this.state\r\n          }).then(() => {\r\n            toast.success(t('mess_edit'));\r\n            this.setState({loading:false})\r\n          });\r\n        } else {\r\n          addNewAdministrativeUnit({\r\n            ...this.state\r\n          }).then((response) => {\r\n            if(response.data != null && response.status == 200){\r\n              this.state.id = response.data.id\r\n              this.setState({...this.state, loading:false})\r\n              toast.success(t('mess_add'));\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  componentWillMount() {\r\n    //getUserById(this.props.uid).then(data => this.setState({ ...data.data }));\r\n    let { open, handleClose,item } = this.props;\r\n    this.setState(item);\r\n  }\r\n\r\n  render() {\r\n    let { open, handleClose, handleOKEditClose, t, i18n } = this.props;\r\n    let {\r\n      id,\r\n      name,\r\n      code,\r\n      level,\r\n      isActive,\r\n      loading\r\n    } = this.state;\r\n    return (\r\n      <Dialog open={open} PaperComponent={PaperComponent} maxWidth={'sm'} fullWidth={true}>\r\n        <div className={clsx(\"wrapperButton\", !loading && 'hidden')} >\r\n          <CircularProgress className=\"buttonProgress\" size={24} />\r\n        </div>\r\n        <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n        <span className=\"mb-20 styleColor\" > {(id ? t(\"update\") : t(\"Add\")) + \" \" + t(\"AdministrativeUnit.title\")} </span>\r\n        <IconButton style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }} onClick={() => handleClose()}><Icon color=\"error\"\r\n              title={t(\"close\")}>\r\n              close\r\n            </Icon>\r\n            </IconButton>\r\n        </DialogTitle>\r\n          <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit} style={{\r\n            overflowY: \"auto\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\"\r\n          }}>\r\n          <DialogContent dividers>\r\n          <Grid className=\"\" container spacing={4}>\r\n              <Grid item sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 mb-16\"\r\n                  label={<span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> *</span>\r\n                      { t('AdministrativeUnit.code')}\r\n                    </span>\r\n                   }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"code\"\r\n                  value={code}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n                <TextValidator\r\n                  className=\"w-100 mb-16\"\r\n                  label={ <span className=\"font\">\r\n                    <span style={{ color: \"red\" }}> *</span>\r\n                    {t('AdministrativeUnit.name')}\r\n                  </span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n                {/* <TextValidator\r\n                  className=\"w-100 mb-16\"\r\n                  label=\"Level\"\r\n                  onChange={this.handleChange}\r\n                  type=\"number\"\r\n                  name=\"level\"\r\n                  value={level}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                /> */}\r\n              </Grid>\r\n              {/* <Grid>\r\n                <FormControlLabel\r\n                  className=\"my-20\"\r\n                  control={\r\n                    <Switch\r\n                      checked={isActive}\r\n                      onChange={event => this.handleChange(event, \"switch\")}\r\n                    />\r\n                  }\r\n                  label=\"Active Customer\"\r\n                />\r\n              </Grid> */}\r\n            </Grid>\r\n \t        </DialogContent>\r\n            \r\n\r\n           <DialogActions spacing={4} className=\"flex flex-end flex-middle\">\r\n            <Button \r\n                variant=\"contained\" \r\n                color=\"secondary\" \r\n                onClick={() => this.props.handleClose()}>\r\n                  {t('Cancel')}\r\n              </Button>\r\n              <Button \r\n                variant=\"contained\"    \r\n                color=\"primary\" \r\n                type=\"submit\">\r\n                  {t('Save')}\r\n              </Button>\r\n            </DialogActions>\r\n          </ValidatorForm>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AdministrativeUnitEditorDialog;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\n// import \"react-tabulator/lib/styles.css\"; // default theme\r\nimport \"react-tabulator/lib/css/bootstrap/tabulator_bootstrap.min.css\"; // use Theme(s)\r\n\r\n// for React 16.4.x use: import { ReactTabulator }\r\n//import { React15Tabulator } from \"react-tabulator\"; // for React 15.x\r\nimport { React15Tabulator, reactFormatter } from \"react-tabulator\"; // for React 15.x\r\n\r\nimport { saveAs } from 'file-saver';\r\nimport { getAllAdministrativeUnits, deleteAdministrativeUnit, getByPage } from \"./AdministrativeUnitService\";\r\nimport AdministrativeUnitEditorDialog from \"./AdministrativeUnitEditorDialog\";\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport ConstantList from \"../../appConfig\";\r\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\r\nimport {\r\n  IconButton,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Icon,\r\n  TablePagination,\r\n  TableContainer,\r\n  Button,\r\n  Card\r\n} from \"@material-ui/core\";\r\nconst columns = [\r\n  { title: \"Name\", field: \"name\", width: \"20%\"},\r\n  { title: \"Age\", field: \"age\", align: \"left\", formatter: \"progress\" , width: \"20%\" },\r\n  { title: \"Favourite Color\", field: \"col\" , width: \"20%\"  },\r\n  { title: \"Date Of Birth\", field: \"dob\", align: \"center\" , width: 150 },\r\n  { title: \"Rating\", field: \"rating\", align: \"center\", formatter: \"star\" , width: 150 },\r\n  { title: \"Passed?\", field: \"passed\", align: \"center\", formatter: \"tickCross\" , width: 150 }\r\n];\r\n// const columns = [\r\n//   { title: \"Name\", field: \"name\", width: \"30%\"},\r\n//   { title: \"Code\", field: \"code\", align: \"left\", formatter: \"progress\" , width: \"40%\" },\r\n//   { title: \"Level\", field: \"level\" , width: \"30%\"  },\r\n// ];\r\n\r\nfunction SimpleButton(props) {\r\n  const { t, i18n } = useTranslation();\r\n  const cellData = props.cell._cell.row.data;\r\n  return <div> \r\n    <button onClick={() => props.onSelect(cellData,0)}>{t(\"Edit\")}</button> \r\n    <button onClick={() => props.onSelect(cellData,1)}>{t(\"Delete\")}</button> \r\n    </div>;\r\n}\r\n\r\n// function GetColumns(){\r\n//   const { t, i18n } = useTranslation();\r\n//   const columns = [\r\n//     { title: t(\"Name\"), field: \"name\", width: \"150\"},\r\n//     { title: t(\"Code\"), field: \"code\", align: \"left\", width: \"150\"},\r\n//     { title: t(\"Level\"), field: \"level\", width: \"150\"},\r\n//     { title: t(\"IsActive\"), field: \"isActive\", width: \"20%\"},\r\n//     {\r\n//       title: t(\"Action\"),\r\n//       field: \"custom\",\r\n//       align: \"left\",\r\n//       width: \"250\",\r\n//       formatter: reactFormatter(\r\n//         <SimpleButton\r\n//           onSelect={(item, method) => {\r\n//             if(method===0){\r\n//               this.setState({ selectedItem: item, shouldOpenEditorDialog: true});\r\n//             }else {\r\n//               this.handleDeleteAdministrativeUnit(item.id);\r\n//             }\r\n//           }}\r\n//         />\r\n//       )\r\n//     }\r\n//   ];\r\n//   return columns;\r\n// }\r\nfunction DeleteData(cellData){\r\n  alert(cellData.id);\r\n}\r\nconst data = [\r\n  {\r\n    id: 1,\r\n    name: \"Oli Bob\",\r\n    age: \"12\",\r\n    col: \"red\",\r\n    dob: \"\",\r\n    rating: 5,\r\n    passed: true\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Mary May\",\r\n    age: \"1\",\r\n    col: \"green\",\r\n    dob: \"14/05/1989\",\r\n    rating: 4,\r\n    passed: true\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Christine Lobowski\",\r\n    age: \"42\",\r\n    col: \"green\",\r\n    dob: \"22/05/1985\",\r\n    rating: 4,\r\n    passed: false\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Brendon Philips\",\r\n    age: \"125\",\r\n    col: \"red\",\r\n    dob: \"01/08/1980\",\r\n    rating: 4.5,\r\n    passed: true\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Margret Marmajuke\",\r\n    age: \"16\",\r\n    col: \"yellow\",\r\n    dob: \"31/01/1999\",\r\n    rating: 4,\r\n    passed: false\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"Van Ng\",\r\n    age: \"37\",\r\n    col: \"green\",\r\n    dob: \"06/15/1982\",\r\n    rating: 4,\r\n    passed: true\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"Duc Ng\",\r\n    age: \"37\",\r\n    col: \"yellow\",\r\n    dob: \"10/15/1982\",\r\n    rating: 4,\r\n    passed: true\r\n  }\r\n];\r\n\r\n// Editable Example:\r\nconst colorOptions = {\r\n  [\"\"]: \"&nbsp;\",\r\n  red: \"red\",\r\n  green: \"green\",\r\n  yellow: \"yellow\"\r\n};\r\nconst editableColumns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    width: 150,\r\n    editor: \"input\",\r\n    headerFilter: \"input\"\r\n  },\r\n  {\r\n    title: \"Age\",\r\n    field: \"age\",\r\n    align: \"left\",\r\n    formatter: \"progress\",\r\n    editor: \"progress\"\r\n  },\r\n  {\r\n    title: \"Favourite Color\",\r\n    field: \"col\",\r\n    editor: \"autocomplete\",\r\n    editorParams: {\r\n      allowEmpty: true,\r\n      showListOnEmpty: true,\r\n      values: colorOptions\r\n    },\r\n    headerFilter: \"select\",\r\n    headerFilterParams: { values: colorOptions }\r\n  },\r\n  { title: \"Date Of Birth\", field: \"dob\", align: \"center\", editor: \"input\" },\r\n  {\r\n    title: \"Rating\",\r\n    field: \"rating\",\r\n    align: \"center\",\r\n    formatter: \"star\",\r\n    editor: true\r\n  },\r\n  {\r\n    title: \"Passed?\",\r\n    field: \"passed\",\r\n    align: \"center\",\r\n    formatter: \"tickCross\",\r\n    editor: true\r\n  }\r\n];\r\n\r\nclass React15TabulatorSample extends React.Component {\r\n  ref = null;\r\n  state = {\r\n    rowsPerPage: 3,\r\n    page: 0,\r\n    data: [],\r\n    totalElements:0,\r\n    administrativeList: [],\r\n    shouldOpenEditorDialog: false,\r\n    shouldOpenConfirmationDialog: false\r\n  };\r\n  SimpleButton=(props)=>{\r\n    const cellData = props.cell._cell.row.data;\r\n    return <div> \r\n      <button onClick={() => props.onSelect(cellData,0)}>Edit</button> \r\n      <button onClick={() => props.onSelect(cellData,1)}>Delete</button> \r\n      </div>;\r\n  }\r\n  setPage = page => {\r\n    this.setState({ page });\r\n  };\r\n\r\n  setRowsPerPage = event => {\r\n    this.setState({ rowsPerPage: event.target.value, page:0});\r\n    this.updatePageData(0,event.target.value);\r\n  };\r\n\r\n  handleChangePage = (event, newPage) => {\r\n    this.setPage(newPage);\r\n    //alert(newPage+\"/\"+this.state.page);\r\n    this.updatePageData(newPage,this.state.rowsPerPage);\r\n  };\r\n  handleDownload = () => {\r\n    var blob = new Blob([\"Hello, world!\"], {type: \"text/plain;charset=utf-8\"});\r\n    saveAs(blob, \"hello world.txt\");    \r\n  }\r\n  handleDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenEditorDialog: false,\r\n      shouldOpenConfirmationDialog: false\r\n    });\r\n    this.setPage(0);\r\n    this.updatePageData(this.state.page,this.state.rowsPerPage);\r\n  };\r\n\r\n  handleDeleteAdministrativeUnit = id => {\r\n    this.setState({\r\n      id,\r\n      shouldOpenConfirmationDialog: true\r\n    });\r\n  };\r\n\r\n  handleConfirmationResponse = () => {\r\n    //alert(this.state.id);\r\n    deleteAdministrativeUnit(this.state.id).then(() => {\r\n      this.handleDialogClose();\r\n    });\r\n  };\r\n  handleEditItem = item => {\r\n    this.setState({\r\n      item:item,\r\n      shouldOpenEditorDialog: true\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    this.updatePageData(this.state.page,this.state.rowsPerPage);\r\n  }\r\n\r\n  updatePageData = (pageIndex, pageSize) => { \r\n    getByPage(pageIndex,pageSize).then(({ data }) => this.setState({\r\n       administrativeList: [...data.content], totalElements:data.totalElements\r\n      }));\r\n  };\r\n\r\n\r\n\r\n  rowClick = (e, row) => {\r\n    console.log(\"ref table: \", this.ref.table); // this is the Tabulator table instance\r\n    console.log(\"rowClick id: ${row.getData().id}\", row, e);\r\n  };\r\n\r\n  setData = () => {\r\n    this.setState({ data:this.state.administrativeList });\r\n  };\r\n\r\n  clearData = () => {\r\n    this.setState({ data: [] });\r\n  };\r\n  GetColumns = (col)=>{\r\n    return col;\r\n  } \r\n  \r\n\r\n  rowClick = (e, row) => {\r\n    //alert(row.getData().name);\r\n    this.setState({item:row.getData()});\r\n    console.log(\"ref table: \", this.ref.table); // this is the Tabulator table instance\r\n    console.log(\"rowClick id: ${row.getData().id}\", row, e);\r\n    this.setState({ selectedName: row.getData().name });\r\n  };\r\n  render() {\r\n    const { t, i18n } = this.props;\r\n    let columns = [\r\n      { title: t(\"Name\"), field: \"name\", width: \"150\"},\r\n      { title: t(\"Code\"), field: \"code\", align: \"left\", width: \"150\"},\r\n      { title: t(\"Level\"), field: \"level\", width: \"150\"},\r\n      { title: t(\"IsActive\"), field: \"isActive\", width: \"20%\"},\r\n      {\r\n        title: t(\"Action\"),\r\n        field: \"custom\",\r\n        align: \"left\",\r\n        width: \"250\",\r\n        formatter: reactFormatter(\r\n          <SimpleButton\r\n            onSelect={(item, method) => {\r\n              if(method===0){\r\n                this.setState({ selectedItem: item, shouldOpenEditorDialog: true});\r\n              }else {\r\n                this.handleDeleteAdministrativeUnit(item.id);\r\n              }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    ];\r\n    const options = {\r\n      height: \"90%\",\r\n      movableRows: false\r\n    };\r\n  let {\r\n      rowsPerPage,\r\n      page,\r\n      administrativeList,\r\n      shouldOpenConfirmationDialog,\r\n      shouldOpenEditorDialog\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        <Button\r\n          className=\"mb-16\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => this.setState({ shouldOpenEditorDialog: true,item:{} })}\r\n        >\r\n          {t('AdministrativeUnitTable.AddNew')}\r\n        </Button>          \r\n          {shouldOpenEditorDialog && (\r\n            <AdministrativeUnitEditorDialog\r\n              handleClose={this.handleDialogClose}\r\n              open={this.state.shouldOpenEditorDialog}\r\n              item={this.state.item}\r\n            />\r\n          )}   \r\n          \r\n          {shouldOpenConfirmationDialog && (\r\n            <ConfirmationDialog\r\n              open={shouldOpenConfirmationDialog}\r\n              onConfirmDialogClose={this.handleDialogClose}\r\n              onYesClick={this.handleConfirmationResponse}\r\n              text=\"Are you sure to delete?\"\r\n            />\r\n          )\r\n          }     \r\n        <React15Tabulator\r\n          ref={ref => (this.ref = ref)}\r\n          columns={columns}\r\n          data={administrativeList}\r\n          rowClick={this.rowClick}\r\n          options={options}\r\n          data-custom-attr=\"test-custom-attribute\"\r\n          className=\"custom-css-class\"\r\n          resizableColumns=\"false\" movableColumns=\"false\" scrollToColumnIfVisible=\"true\" selectableRollingSelection=\"false\"\r\n          //min-width=\"750px\"\r\n        />\r\n        {/* <Pagination/> */}\r\n      \r\n          <TablePagination\r\n            align=\"left\"\r\n            className=\"px-16\"\r\n            rowsPerPageOptions={[1,2,3,5, 10, 25]}\r\n            component=\"div\"\r\n            count={this.state.totalElements}\r\n            rowsPerPage={this.state.rowsPerPage}\r\n            page={this.state.page}\r\n            backIconButtonProps={{\r\n              \"aria-label\": \"Previous Page\"\r\n            }}\r\n            nextIconButtonProps={{\r\n              \"aria-label\": \"Next Page\"\r\n            }}\r\n            onChangePage={this.handleChangePage}\r\n            onChangeRowsPerPage={this.setRowsPerPage}\r\n          />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default React15TabulatorSample;\r\n"],"sourceRoot":""}