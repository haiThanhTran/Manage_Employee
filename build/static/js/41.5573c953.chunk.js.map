{"version":3,"sources":["app/views/sessions/SessionService.js","app/views/sessions/SignUp_RegisterHealthOrg.jsx"],"names":["API_PATH","ConstantList","API_ENPOINT","signUpAndCreateHealthOrg","item","url","axios","post","checkUsername","checkEmail","toast","configure","connect","state","Component","constructor","props","super","this","username","email","password","re_password","agreement","confirmPassword","isView","eqaRound","healthOrgType","hasErrorEQARound","hasErrorHealthOrgType","shouldOpenSignupSuccessDialog","passwordIsMasked","confirmPasswordIsMasked","handleChange","event","source","persist","setState","target","checked","[object Object]","name","value","handleSelectEQARound","itemSelected","handleSelectHealthOrgType","handleFormSubmit","registerDto","t","trim","length","warning","then","result","data","error","duplicateEmail","sendEmailFailed","success","history","push","togglePasswordMask","prevState","toggleConfirmPasswordMask","componentDidMount","ValidatorForm","addValidationRule","componentWillUnmount","removeValidationRule","render","i18n","fax","officerPosion","unitCodeOfProgramPEQAS","taxCodeOfTheUnit","description","address","contactName","contactPhone","listEQARound","listHealthOrgType","React","createElement","ref","onSubmit","className","Card","Grid","container","lg","md","sm","xs","src","alt","spacing","TextValidator","size","variant","label","style","color","onChange","type","validators","errorMessages","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","Icon","title","Button","ROOT_PATH"],"mappings":"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","file":"static/js/41.5573c953.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport ConstantList from \"../../appConfig\";\r\nconst API_PATH = ConstantList.API_ENPOINT + \"/public\";\r\nconst API_PATH_EQARound = API_PATH + \"/EQARound\";\r\nconst API_PATH_HealthOrgType = API_PATH + \"/HealthOrgType\";\r\n\r\nexport const getAllEQARound = () => {\r\n  let searchObject = {};\r\n  searchObject.pageIndex = 1;\r\n  searchObject.pageSize = 1000;\r\n  var url = API_PATH_EQARound + \"/search\";\r\n  return axios.post(url, searchObject);\r\n};\r\n\r\nexport const getAllHealthOrgType = () => {\r\n  let searchObject = {};\r\n  searchObject.pageIndex = 1;\r\n  searchObject.pageSize = 1000;\r\n  var url = API_PATH_HealthOrgType + \"/search\";\r\n  return axios.post(url, searchObject);\r\n};\r\n\r\nexport const signUpAndCreateHealthOrg = item => {\r\n  var url = API_PATH + \"/signUpAndCreateHealthOrg\";\r\n  return axios.post(url, item);\r\n};\r\n\r\nexport const checkUsername = item => {\r\n  var url = API_PATH + \"/checkUsername\";\r\n  return axios.post(url, item);\r\n};\r\n\r\nexport const checkEmail = item => {\r\n  var url = API_PATH + \"/checkEmail\";\r\n  return axios.post(url, item);\r\n};\r\n","import React, { Component } from \"react\";\r\nimport ConstantList from \"../../appConfig\";\r\nimport {\r\n  Card,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Grid,\r\n  Button,\r\n  InputAdornment,\r\n  Select,\r\n  Input,\r\n  InputLabel,\r\n  FormControl,\r\n  MenuItem,\r\n  FormHelperText,\r\n  IconButton,\r\n  Icon\r\n} from \"@material-ui/core\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport {\r\n  getAllEQARound,\r\n  getAllHealthOrgType,\r\n  signUpAndCreateHealthOrg,\r\n  checkUsername,\r\n  checkEmail\r\n} from \"./SessionService\";\r\nimport UploadFile from \"../utilities/UploadFile\";\r\nimport { connect } from \"react-redux\";\r\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ntoast.configure();\r\n// function CheckBoxLable() {\r\n//   const { t, i18n } = useTranslation();\r\n//   return (\r\n//     <span>\r\n//       {t(\"sign_up.valid_checkbox_title\")}{\" \"}\r\n//       <i>\r\n//         <b> {t(\"sign_up.valid_checkbox_content\")} </b>\r\n//       </i>\r\n//     </span>\r\n//   );\r\n// }\r\n\r\nclass SignUp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // getAllEQARound().then((result) => {\r\n    //   let listEQARound = result.data.content;\r\n    //   this.setState({ listEQARound: listEQARound });\r\n    // });\r\n\r\n    // getAllHealthOrgType().then((result) => {\r\n    //   let listHealthOrgType = result.data.content;\r\n    //   this.setState({ listHealthOrgType: listHealthOrgType });\r\n    // });\r\n  }\r\n\r\n  state = {\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    re_password: \"\",\r\n    agreement: false,\r\n    confirmPassword: \"\",\r\n    isView: true,\r\n    eqaRound: null,\r\n    healthOrgType: null,\r\n    //listEQARound: [],\r\n    hasErrorEQARound: false,\r\n    //listHealthOrgType: [],\r\n    hasErrorHealthOrgType: false,\r\n    shouldOpenSignupSuccessDialog: false,\r\n    passwordIsMasked: true,\r\n    confirmPasswordIsMasked: true\r\n  };\r\n\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if(source === \"checkbox\"){\r\n      this.setState({isView: !event.target.checked, agreement: event.target.checked });\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleSelectEQARound = itemSelected => {\r\n    let item = itemSelected.target.value;\r\n    this.setState({ eqaRound: item }, function() {});\r\n  };\r\n\r\n  handleSelectHealthOrgType = itemSelected => {\r\n    let item = itemSelected.target.value;\r\n    this.setState({ healthOrgType: item }, function() {});\r\n  };\r\n\r\n  handleFormSubmit = event => {\r\n    let registerDto = {};\r\n    let { t } = this.props;\r\n    let { password, re_password} = this.state;\r\n    registerDto.email = this.state.email.trim();\r\n    registerDto.username = this.state.email.trim();\r\n    if(password.length < 8 && re_password.length < 8){\r\n      toast.warning(t(\"sign_up.weak_password\"));\r\n      return\r\n    }else{\r\n      if(password !== re_password){\r\n        toast.warning(t(\"sign_up.duplicate_pass\"));\r\n        return\r\n      }\r\n    }\r\n    checkUsername(registerDto).then(\r\n      result => {\r\n        if (result && result.data && result.data != \"\") {\r\n          toast.error(t(\"sign_up.duplicate_email\"));\r\n        } else {\r\n          checkEmail(registerDto).then(\r\n            result => {\r\n              if (result && result.data && result.data != \"\") {\r\n                toast.error(t(\"sign_up.duplicate_email\"));\r\n              } else {\r\n                signUpAndCreateHealthOrg(this.state).then(result => {\r\n                  if (\r\n                    result != null &&\r\n                    result.data != null &&\r\n                    result.data != \"\"\r\n                  ) {\r\n                    if (result.data.duplicateEmail) {\r\n                      toast.error(t(\"sign_up.duplicate_email\"));\r\n                    } else if (result.data.sendEmailFailed) {\r\n                      toast.error(t(\"sign_up.error_email\"));\r\n                    }\r\n                  } else {\r\n                    toast.error(t(\"sign_up.error_signup\"));\r\n                  }\r\n\r\n                  toast.success(t(\"mess_SignUp\"));\r\n                  this.props.history.push(\"/session/signin\");\r\n                });\r\n              }\r\n            },\r\n            error => {\r\n              // alert('Có lỗi xảy ra khi đăng ký.');\r\n              toast.error(t(\"sign_up.error_signup\"));\r\n            }\r\n          );\r\n        }\r\n      },\r\n      error => {\r\n        // alert('Có lỗi xảy ra khi đăng ký.');\r\n        toast.error(t(\"sign_up.error_signup\"));\r\n      }\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    // custom rule will have name 'isPasswordMatch'\r\n    ValidatorForm.addValidationRule(\"isPasswordMatch\", value => {\r\n      if (value !== this.state.password) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    ValidatorForm.addValidationRule(\"isLengthNumber\", value => {\r\n      if (value.length > 10) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // remove rule when it is not needed\r\n    ValidatorForm.removeValidationRule(\"isPasswordMatch\");\r\n  }\r\n\r\n  togglePasswordMask = () => {\r\n    this.setState(prevState => ({\r\n      passwordIsMasked: !prevState.passwordIsMasked\r\n    }));\r\n  };\r\n\r\n  toggleConfirmPasswordMask = () => {\r\n    this.setState(prevState => ({\r\n      confirmPasswordIsMasked: !prevState.confirmPasswordIsMasked\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { t, i18n } = this.props;\r\n    let {\r\n      fax,\r\n      officerPosion,\r\n      unitCodeOfProgramPEQAS,\r\n      name,\r\n      taxCodeOfTheUnit,\r\n      description,\r\n      address,\r\n      healthOrgType,\r\n      contactName,\r\n      contactPhone,\r\n      listEQARound,\r\n      eqaRound,\r\n      hasErrorEQARound,\r\n      listHealthOrgType,\r\n      hasErrorHealthOrgType,\r\n      username,\r\n      email,\r\n      password,\r\n      isView,\r\n      //confirmPassword,\r\n      re_password,\r\n      passwordIsMasked,\r\n      confirmPasswordIsMasked\r\n    } = this.state;\r\n\r\n    return (\r\n      <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit}>\r\n        <div className=\"signup flex flex-center w-100 h-100vh\">\r\n          <div className=\"p-8\">\r\n            <Card className=\"signup-card-customs position-relative y-center\">\r\n              <Grid container>\r\n                <Grid item lg={2} md={2} sm={2} xs={12}>\r\n                  <div className=\"p-32 flex flex-center bg-light-gray flex-middle h-100\">\r\n                    <img\r\n                      src=\"/assets/images/illustrations/posting_photo.svg\"\r\n                      alt=\"\"\r\n                    />\r\n                  </div>\r\n                </Grid>\r\n                <Grid item lg={10} md={10} sm={10} xs={12}>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                      <div className=\"pt-16\">\r\n                        <h4 className=\"text-center\">\r\n                          {t(\"sign_up.title_form\")}\r\n                        </h4>\r\n                      </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item lg={12} md={12} sm={12} xs={12} className=\"m-16\">\r\n                    <Grid container spacing={2}>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          className=\"w-100\"\r\n                          variant=\"outlined\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.healthOrgName\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          value={name}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          className=\"w-100\"\r\n                          variant=\"outlined\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"Email\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"email\"\r\n                          name=\"email\"\r\n                          value={email}\r\n                          validators={[\"required\", \"isEmail\"]}\r\n                          errorMessages={[\r\n                            t(\"general.errorMessages_required\"),\r\n                            t(\"general.errorMessages_email_valid\")\r\n                          ]}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.taxCodeOfTheUnit\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"taxCodeOfTheUnit\"\r\n                          value={taxCodeOfTheUnit}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.unitCodeOfProgramPEQAS\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"unitCodeOfProgramPEQAS\"\r\n                          value={unitCodeOfProgramPEQAS}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.contactName\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"contactName\"\r\n                          value={contactName}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.officerPosion\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"officerPosion\"\r\n                          value={officerPosion}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.contactPhone\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"contactPhone\"\r\n                          value={contactPhone}\r\n                          validators={[\"required\", \"matchRegexp:^[0-9]*$\", \"isLengthNumber\"]}\r\n                          errorMessages={[\r\n                            t(\"general.errorMessages_required\"),\r\n                            t(\"general.errorMessages_phone_number_invalid\"),\r\n                            t(\"general.errorMessages_phone_number_invalid\")\r\n                          ]}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={t(\"sign_up.fax\")}\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"fax\"\r\n                          value={fax}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.address\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          name=\"address\"\r\n                          value={address}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item sm={6} xs={12}>\r\n                        <TextValidator\r\n                          className=\"mb-16 w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"password\")}\r\n                          </span>\r\n                          }\r\n                          variant=\"outlined\"\r\n                          onChange={this.handleChange}\r\n                          name=\"password\"\r\n                          type={passwordIsMasked ? \"password\" : \"text\"}\r\n                          value={password}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                          InputProps={{\r\n                            endAdornment: (\r\n                              <InputAdornment position=\"end\">\r\n                                <IconButton onClick={this.togglePasswordMask}>\r\n                                  {passwordIsMasked ? (\r\n                                    <Icon\r\n                                      color=\"primary\"\r\n                                      title={t(\"show_password\")}\r\n                                    >\r\n                                      visibility_off\r\n                                    </Icon>\r\n                                  ) : (\r\n                                    <Icon\r\n                                      color=\"primary\"\r\n                                      title={t(\"hide_password\")}\r\n                                    >\r\n                                      visibility\r\n                                    </Icon>\r\n                                  )}\r\n                                </IconButton>\r\n                              </InputAdornment>\r\n                            )\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item sm={6} xs={12}>\r\n                        <TextValidator\r\n                          className=\"mb-16 w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"re_password\")}\r\n                          </span>\r\n                          }\r\n                          variant=\"outlined\"\r\n                          onChange={this.handleChange}\r\n                          name=\"re_password\"\r\n                          type={confirmPasswordIsMasked ? \"password\" : \"text\"}\r\n                          value={re_password}\r\n                          validators={[\"required\", \"isPasswordMatch\"]}\r\n                          errorMessages={[\r\n                            t(\"general.errorMessages_required\"),\r\n                            t(\"general.isPasswordMatch\")\r\n                          ]}\r\n                          InputProps={{\r\n                            endAdornment: (\r\n                              <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                  onClick={this.toggleConfirmPasswordMask}\r\n                                >\r\n                                  {confirmPasswordIsMasked ? (\r\n                                    <Icon\r\n                                      color=\"primary\"\r\n                                      title={t(\"show_password\")}\r\n                                    >\r\n                                      visibility_off\r\n                                    </Icon>\r\n                                  ) : (\r\n                                    <Icon\r\n                                      color=\"primary\"\r\n                                      title={t(\"hide_password\")}\r\n                                    >\r\n                                      visibility\r\n                                    </Icon>\r\n                                  )}\r\n                                </IconButton>\r\n                              </InputAdornment>\r\n                            )\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      {/* <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                        <UploadFile\r\n                        />\r\n                      </Grid> */}\r\n                    </Grid>\r\n\r\n                    <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                      <div>\r\n                        {/* <FormControlLabel\r\n                          className=\"w-100 mt-16\"\r\n                          name=\"agreement\"\r\n                          onChange={event => this.handleChange(event, \"checkbox\")}\r\n                          control={<Checkbox />}\r\n                          label={<CheckBoxLable />}\r\n                        /> */}\r\n                        <div className=\"flex flex-middle mt-16\">\r\n                          <Button\r\n                            className=\"capitalize \"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            // disabled= {isView}\r\n                            type=\"submit\"\r\n                          >\r\n                            {t(\"sign_up.title\")}\r\n                          </Button>\r\n                          <span className=\"ml-16 mr-8\">{t(\"or\")}</span>\r\n                          <Button\r\n                            className=\"capitalize\"\r\n                            variant=\"contained\"\r\n                            onClick={() =>\r\n                              this.props.history.push(\r\n                                ConstantList.ROOT_PATH + \"session/signin\"\r\n                              )\r\n                            }\r\n                          >\r\n                            {t(\"sign_in.title\")}\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </ValidatorForm>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  // setUser: PropTypes.func.isRequired\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(SignUp);\r\n"],"sourceRoot":""}