{"version":3,"sources":["app/views/sessions/SessionService.js","app/views/utilities/UploadFile.jsx","app/views/sessions/SignUp_RegisterHealthOrg.jsx"],"names":["API_PATH","ConstantList","API_ENPOINT","Component","toast","configure","SignUp","_Component","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","state","username","email","password","re_password","agreement","confirmPassword","isView","eqaRound","healthOrgType","hasErrorEQARound","hasErrorHealthOrgType","shouldOpenSignupSuccessDialog","passwordIsMasked","confirmPasswordIsMasked","handleChange","event","source","persist","setState","target","checked","name","value","handleSelectEQARound","itemSelected","item","handleSelectHealthOrgType","handleFormSubmit","registerDto","t","_this$state","trim","length","warning","url","axios","post","checkUsername","then","result","data","error","checkEmail","signUpAndCreateHealthOrg","duplicateEmail","sendEmailFailed","success","history","push","togglePasswordMask","prevState","toggleConfirmPasswordMask","_inherits","_createClass","key","_this2","ValidatorForm","addValidationRule","removeValidationRule","_this3","_this$props","this","_this$state2","i18n","fax","officerPosion","unitCodeOfProgramPEQAS","taxCodeOfTheUnit","address","description","contactName","contactPhone","listEQARound","listHealthOrgType","React","createElement","ref","onSubmit","className","Card","Grid","container","lg","md","sm","xs","src","alt","spacing","TextValidator","size","variant","label","style","color","onChange","type","validators","errorMessages","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","Icon","title","Button","ROOT_PATH","connect"],"mappings":"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","file":"static/js/37.d5905fdf.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport ConstantList from \"../../appConfig\";\r\nconst API_PATH = ConstantList.API_ENPOINT + \"/public\";\r\nconst API_PATH_EQARound = API_PATH + \"/EQARound\";\r\nconst API_PATH_HealthOrgType = API_PATH + \"/HealthOrgType\";\r\n\r\nexport const getAllEQARound = () => {\r\n  let searchObject = {};\r\n  searchObject.pageIndex = 1;\r\n  searchObject.pageSize = 1000;\r\n  var url = API_PATH_EQARound + \"/search\";\r\n  return axios.post(url, searchObject);\r\n};\r\n\r\nexport const getAllHealthOrgType = () => {\r\n  let searchObject = {};\r\n  searchObject.pageIndex = 1;\r\n  searchObject.pageSize = 1000;\r\n  var url = API_PATH_HealthOrgType + \"/search\";\r\n  return axios.post(url, searchObject);\r\n};\r\n\r\nexport const signUpAndCreateHealthOrg = item => {\r\n  var url = API_PATH + \"/signUpAndCreateHealthOrg\";\r\n  return axios.post(url, item);\r\n};\r\n\r\nexport const checkUsername = item => {\r\n  var url = API_PATH + \"/checkUsername\";\r\n  return axios.post(url, item);\r\n};\r\n\r\nexport const checkEmail = item => {\r\n  var url = API_PATH + \"/checkEmail\";\r\n  return axios.post(url, item);\r\n};\r\n","import React, { Component } from 'react'\r\nimport {DropzoneDialog} from 'material-ui-dropzone'\r\nimport Button from '@material-ui/core/Button';\r\n \r\nexport default class DropzoneDialogExample extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            files: []\r\n        };\r\n    }\r\n \r\n    handleClose() {\r\n        this.setState({\r\n            open: false\r\n        });\r\n    }\r\n \r\n    handleAddFile(file) {\r\n        //Saving files to state for further use and closing Modal.\r\n        // debugger;\r\n        // console.log(file);\r\n    }\r\n \r\n    handleSave(files) {\r\n        //Saving files to state for further use and closing Modal.\r\n        this.setState({\r\n            files: files,\r\n            open: false\r\n        });\r\n    }\r\n \r\n    handleOpen() {\r\n        this.setState({\r\n            open: true,\r\n        });\r\n    }\r\n \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button onClick={this.handleOpen.bind(this)}>\r\n                  Add file\r\n                </Button>\r\n                <DropzoneDialog\r\n                    open={this.state.open}\r\n                    onAdd={this.handleAddFile}\r\n                    onSave={this.handleSave.bind(this)}\r\n                    // acceptedFiles={['image/jpeg', 'image/png', 'image/bmp']}\r\n                    acceptedFiles={['application/msword', 'application/vnd.ms-excel', 'application/vnd.ms-powerpoint', 'text/plain', 'application/pdf', 'image/*']}\r\n                    showPreviews={true}\r\n                    showFileNames\r\n                    filesLimit={2}\r\n                    maxFileSize={5000000}\r\n                    onClose={this.handleClose.bind(this)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport ConstantList from \"../../appConfig\";\r\nimport {\r\n  Card,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Grid,\r\n  Button,\r\n  InputAdornment,\r\n  Select,\r\n  Input,\r\n  InputLabel,\r\n  FormControl,\r\n  MenuItem,\r\n  FormHelperText,\r\n  IconButton,\r\n  Icon\r\n} from \"@material-ui/core\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport {\r\n  getAllEQARound,\r\n  getAllHealthOrgType,\r\n  signUpAndCreateHealthOrg,\r\n  checkUsername,\r\n  checkEmail\r\n} from \"./SessionService\";\r\nimport UploadFile from \"../utilities/UploadFile\";\r\nimport { connect } from \"react-redux\";\r\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ntoast.configure();\r\n// function CheckBoxLable() {\r\n//   const { t, i18n } = useTranslation();\r\n//   return (\r\n//     <span>\r\n//       {t(\"sign_up.valid_checkbox_title\")}{\" \"}\r\n//       <i>\r\n//         <b> {t(\"sign_up.valid_checkbox_content\")} </b>\r\n//       </i>\r\n//     </span>\r\n//   );\r\n// }\r\n\r\nclass SignUp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // getAllEQARound().then((result) => {\r\n    //   let listEQARound = result.data.content;\r\n    //   this.setState({ listEQARound: listEQARound });\r\n    // });\r\n\r\n    // getAllHealthOrgType().then((result) => {\r\n    //   let listHealthOrgType = result.data.content;\r\n    //   this.setState({ listHealthOrgType: listHealthOrgType });\r\n    // });\r\n  }\r\n\r\n  state = {\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    re_password: \"\",\r\n    agreement: false,\r\n    confirmPassword: \"\",\r\n    isView: true,\r\n    eqaRound: null,\r\n    healthOrgType: null,\r\n    //listEQARound: [],\r\n    hasErrorEQARound: false,\r\n    //listHealthOrgType: [],\r\n    hasErrorHealthOrgType: false,\r\n    shouldOpenSignupSuccessDialog: false,\r\n    passwordIsMasked: true,\r\n    confirmPasswordIsMasked: true\r\n  };\r\n\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if(source === \"checkbox\"){\r\n      this.setState({isView: !event.target.checked, agreement: event.target.checked });\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleSelectEQARound = itemSelected => {\r\n    let item = itemSelected.target.value;\r\n    this.setState({ eqaRound: item }, function() {});\r\n  };\r\n\r\n  handleSelectHealthOrgType = itemSelected => {\r\n    let item = itemSelected.target.value;\r\n    this.setState({ healthOrgType: item }, function() {});\r\n  };\r\n\r\n  handleFormSubmit = event => {\r\n    let registerDto = {};\r\n    let { t } = this.props;\r\n    let { password, re_password} = this.state;\r\n    registerDto.email = this.state.email.trim();\r\n    registerDto.username = this.state.email.trim();\r\n    if(password.length < 8 && re_password.length < 8){\r\n      toast.warning(t(\"sign_up.weak_password\"));\r\n      return\r\n    }else{\r\n      if(password !== re_password){\r\n        toast.warning(t(\"sign_up.duplicate_pass\"));\r\n        return\r\n      }\r\n    }\r\n    checkUsername(registerDto).then(\r\n      result => {\r\n        if (result && result.data && result.data != \"\") {\r\n          toast.error(t(\"sign_up.duplicate_email\"));\r\n        } else {\r\n          checkEmail(registerDto).then(\r\n            result => {\r\n              if (result && result.data && result.data != \"\") {\r\n                toast.error(t(\"sign_up.duplicate_email\"));\r\n              } else {\r\n                signUpAndCreateHealthOrg(this.state).then(result => {\r\n                  if (\r\n                    result != null &&\r\n                    result.data != null &&\r\n                    result.data != \"\"\r\n                  ) {\r\n                    if (result.data.duplicateEmail) {\r\n                      toast.error(t(\"sign_up.duplicate_email\"));\r\n                    } else if (result.data.sendEmailFailed) {\r\n                      toast.error(t(\"sign_up.error_email\"));\r\n                    }\r\n                  } else {\r\n                    toast.error(t(\"sign_up.error_signup\"));\r\n                  }\r\n\r\n                  toast.success(t(\"mess_SignUp\"));\r\n                  this.props.history.push(\"/session/signin\");\r\n                });\r\n              }\r\n            },\r\n            error => {\r\n              // alert('Có lỗi xảy ra khi đăng ký.');\r\n              toast.error(t(\"sign_up.error_signup\"));\r\n            }\r\n          );\r\n        }\r\n      },\r\n      error => {\r\n        // alert('Có lỗi xảy ra khi đăng ký.');\r\n        toast.error(t(\"sign_up.error_signup\"));\r\n      }\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    // custom rule will have name 'isPasswordMatch'\r\n    ValidatorForm.addValidationRule(\"isPasswordMatch\", value => {\r\n      if (value !== this.state.password) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    ValidatorForm.addValidationRule(\"isLengthNumber\", value => {\r\n      if (value.length > 10) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // remove rule when it is not needed\r\n    ValidatorForm.removeValidationRule(\"isPasswordMatch\");\r\n  }\r\n\r\n  togglePasswordMask = () => {\r\n    this.setState(prevState => ({\r\n      passwordIsMasked: !prevState.passwordIsMasked\r\n    }));\r\n  };\r\n\r\n  toggleConfirmPasswordMask = () => {\r\n    this.setState(prevState => ({\r\n      confirmPasswordIsMasked: !prevState.confirmPasswordIsMasked\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { t, i18n } = this.props;\r\n    let {\r\n      fax,\r\n      officerPosion,\r\n      unitCodeOfProgramPEQAS,\r\n      name,\r\n      taxCodeOfTheUnit,\r\n      description,\r\n      address,\r\n      healthOrgType,\r\n      contactName,\r\n      contactPhone,\r\n      listEQARound,\r\n      eqaRound,\r\n      hasErrorEQARound,\r\n      listHealthOrgType,\r\n      hasErrorHealthOrgType,\r\n      username,\r\n      email,\r\n      password,\r\n      isView,\r\n      //confirmPassword,\r\n      re_password,\r\n      passwordIsMasked,\r\n      confirmPasswordIsMasked\r\n    } = this.state;\r\n\r\n    return (\r\n      <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit}>\r\n        <div className=\"signup flex flex-center w-100 h-100vh\">\r\n          <div className=\"p-8\">\r\n            <Card className=\"signup-card-customs position-relative y-center\">\r\n              <Grid container>\r\n                <Grid item lg={2} md={2} sm={2} xs={12}>\r\n                  <div className=\"p-32 flex flex-center bg-light-gray flex-middle h-100\">\r\n                    <img\r\n                      src=\"/assets/images/illustrations/posting_photo.svg\"\r\n                      alt=\"\"\r\n                    />\r\n                  </div>\r\n                </Grid>\r\n                <Grid item lg={10} md={10} sm={10} xs={12}>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                      <div className=\"pt-16\">\r\n                        <h4 className=\"text-center\">\r\n                          {t(\"sign_up.title_form\")}\r\n                        </h4>\r\n                      </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item lg={12} md={12} sm={12} xs={12} className=\"m-16\">\r\n                    <Grid container spacing={2}>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          className=\"w-100\"\r\n                          variant=\"outlined\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.healthOrgName\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          value={name}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          className=\"w-100\"\r\n                          variant=\"outlined\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"Email\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"email\"\r\n                          name=\"email\"\r\n                          value={email}\r\n                          validators={[\"required\", \"isEmail\"]}\r\n                          errorMessages={[\r\n                            t(\"general.errorMessages_required\"),\r\n                            t(\"general.errorMessages_email_valid\")\r\n                          ]}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.taxCodeOfTheUnit\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"taxCodeOfTheUnit\"\r\n                          value={taxCodeOfTheUnit}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.unitCodeOfProgramPEQAS\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"unitCodeOfProgramPEQAS\"\r\n                          value={unitCodeOfProgramPEQAS}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.contactName\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"contactName\"\r\n                          value={contactName}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.officerPosion\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"officerPosion\"\r\n                          value={officerPosion}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.contactPhone\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"contactPhone\"\r\n                          value={contactPhone}\r\n                          validators={[\"required\", \"matchRegexp:^[0-9]*$\", \"isLengthNumber\"]}\r\n                          errorMessages={[\r\n                            t(\"general.errorMessages_required\"),\r\n                            t(\"general.errorMessages_phone_number_invalid\"),\r\n                            t(\"general.errorMessages_phone_number_invalid\")\r\n                          ]}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={t(\"sign_up.fax\")}\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"fax\"\r\n                          value={fax}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.address\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          name=\"address\"\r\n                          value={address}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item sm={6} xs={12}>\r\n                        <TextValidator\r\n                          className=\"mb-16 w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"password\")}\r\n                          </span>\r\n                          }\r\n                          variant=\"outlined\"\r\n                          onChange={this.handleChange}\r\n                          name=\"password\"\r\n                          type={passwordIsMasked ? \"password\" : \"text\"}\r\n                          value={password}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                          InputProps={{\r\n                            endAdornment: (\r\n                              <InputAdornment position=\"end\">\r\n                                <IconButton onClick={this.togglePasswordMask}>\r\n                                  {passwordIsMasked ? (\r\n                                    <Icon\r\n                                      color=\"primary\"\r\n                                      title={t(\"show_password\")}\r\n                                    >\r\n                                      visibility_off\r\n                                    </Icon>\r\n                                  ) : (\r\n                                    <Icon\r\n                                      color=\"primary\"\r\n                                      title={t(\"hide_password\")}\r\n                                    >\r\n                                      visibility\r\n                                    </Icon>\r\n                                  )}\r\n                                </IconButton>\r\n                              </InputAdornment>\r\n                            )\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item sm={6} xs={12}>\r\n                        <TextValidator\r\n                          className=\"mb-16 w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"re_password\")}\r\n                          </span>\r\n                          }\r\n                          variant=\"outlined\"\r\n                          onChange={this.handleChange}\r\n                          name=\"re_password\"\r\n                          type={confirmPasswordIsMasked ? \"password\" : \"text\"}\r\n                          value={re_password}\r\n                          validators={[\"required\", \"isPasswordMatch\"]}\r\n                          errorMessages={[\r\n                            t(\"general.errorMessages_required\"),\r\n                            t(\"general.isPasswordMatch\")\r\n                          ]}\r\n                          InputProps={{\r\n                            endAdornment: (\r\n                              <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                  onClick={this.toggleConfirmPasswordMask}\r\n                                >\r\n                                  {confirmPasswordIsMasked ? (\r\n                                    <Icon\r\n                                      color=\"primary\"\r\n                                      title={t(\"show_password\")}\r\n                                    >\r\n                                      visibility_off\r\n                                    </Icon>\r\n                                  ) : (\r\n                                    <Icon\r\n                                      color=\"primary\"\r\n                                      title={t(\"hide_password\")}\r\n                                    >\r\n                                      visibility\r\n                                    </Icon>\r\n                                  )}\r\n                                </IconButton>\r\n                              </InputAdornment>\r\n                            )\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      {/* <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                        <UploadFile\r\n                        />\r\n                      </Grid> */}\r\n                    </Grid>\r\n\r\n                    <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                      <div>\r\n                        {/* <FormControlLabel\r\n                          className=\"w-100 mt-16\"\r\n                          name=\"agreement\"\r\n                          onChange={event => this.handleChange(event, \"checkbox\")}\r\n                          control={<Checkbox />}\r\n                          label={<CheckBoxLable />}\r\n                        /> */}\r\n                        <div className=\"flex flex-middle mt-16\">\r\n                          <Button\r\n                            className=\"capitalize \"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            // disabled= {isView}\r\n                            type=\"submit\"\r\n                          >\r\n                            {t(\"sign_up.title\")}\r\n                          </Button>\r\n                          <span className=\"ml-16 mr-8\">{t(\"or\")}</span>\r\n                          <Button\r\n                            className=\"capitalize\"\r\n                            variant=\"contained\"\r\n                            onClick={() =>\r\n                              this.props.history.push(\r\n                                ConstantList.ROOT_PATH + \"session/signin\"\r\n                              )\r\n                            }\r\n                          >\r\n                            {t(\"sign_in.title\")}\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </ValidatorForm>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  // setUser: PropTypes.func.isRequired\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(SignUp);\r\n"],"sourceRoot":""}