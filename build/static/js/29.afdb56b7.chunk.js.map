{"version":3,"sources":["app/views/AdministrativeUnit/AdministrativeUnitService.js","app/views/AdministrativeUnit/AdministrativeUnitEditorDialog.jsx","app/views/AdministrativeUnit/React15TabulatorSample.js"],"names":["__webpack_require__","d","__webpack_exports__","getByPage","checkCode","getUserById","deleteAdministrativeUnit","addNewAdministrativeUnit","updateAdministrativeUnit","axios__WEBPACK_IMPORTED_MODULE_0__","axios__WEBPACK_IMPORTED_MODULE_0___default","n","_appConfig__WEBPACK_IMPORTED_MODULE_1__","_appConfig__WEBPACK_IMPORTED_MODULE_1___default","searchDto","url","ConstantList","API_ENPOINT","axios","post","id","code","config","params","get","delete","adminUnit","PaperComponent","props","React","createElement","Draggable","handle","cancel","Paper","toast","configure","autoClose","draggable","limit","AdministrativeUnitEditorDialog","Component","constructor","super","arguments","this","state","name","level","isActive","loading","handleChange","event","source","persist","setState","[object Object]","target","value","checked","openCircularProgress","handleFormSubmit","async","t","then","result","data","console","log","warning","_objectSpread","success","response","status","componentWillMount","open","handleClose","item","render","handleOKEditClose","i18n","Dialog","maxWidth","fullWidth","className","clsx","CircularProgress","size","DialogTitle","style","cursor","IconButton","position","right","top","onClick","Icon","color","title","ValidatorForm","ref","onSubmit","overflowY","display","flexDirection","DialogContent","dividers","Grid","container","spacing","sm","xs","TextValidator","label","onChange","type","validators","errorMessages","variant","DialogActions","Button","r","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","react_tabulator__WEBPACK_IMPORTED_MODULE_3__","file_saver__WEBPACK_IMPORTED_MODULE_4__","_AdministrativeUnitService__WEBPACK_IMPORTED_MODULE_5__","_AdministrativeUnitEditorDialog__WEBPACK_IMPORTED_MODULE_6__","egret__WEBPACK_IMPORTED_MODULE_7__","react_i18next__WEBPACK_IMPORTED_MODULE_9__","_material_ui_core__WEBPACK_IMPORTED_MODULE_10__","_material_ui_core__WEBPACK_IMPORTED_MODULE_11__","SimpleButton","useTranslation","cellData","cell","_cell","row","onSelect","React15TabulatorSample","rowsPerPage","page","totalElements","administrativeList","shouldOpenEditorDialog","shouldOpenConfirmationDialog","setPage","setRowsPerPage","updatePageData","handleChangePage","newPage","handleDownload","blob","Blob","saveAs","handleDialogClose","handleDeleteAdministrativeUnit","handleConfirmationResponse","handleEditItem","pageIndex","pageSize","_ref","content","rowClick","e","table","setData","clearData","GetColumns","col","getData","selectedName","componentDidMount","columns","field","width","align","formatter","reactFormatter","method","selectedItem","ConfirmationDialog","onConfirmDialogClose","onYesClick","text","React15Tabulator","options","height","movableRows","data-custom-attr","resizableColumns","movableColumns","scrollToColumnIfVisible","selectableRollingSelection","TablePagination","rowsPerPageOptions","component","count","backIconButtonProps","aria-label","nextIconButtonProps","onChangePage","onChangeRowsPerPage"],"mappings":"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","file":"static/js/29.afdb56b7.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport ConstantList from \"../../appConfig\";\r\nexport const getAllAdministrativeUnits = () => {\r\n  //return axios.get(\"/api/user/all\");\r\n  //alert( axios.defaults.headers.common[\"Authorization\"]);\r\n  return axios.get(ConstantList.API_ENPOINT + \"/api/administrativeunit/1/10\");\r\n  //return axios.get(ConstantList.API_ENPOINT+\"/public/animal/1/10\");  \r\n};\r\n\r\n// export const getByPage = (searchDto) => {\r\n//   var url = ConstantList.API_ENPOINT + \"/api/administrativeunit/\" + searchDto.pageIndex + '/' + searchDto.pageSize;\r\n//   return axios.get(url);\r\n// };\r\n\r\nexport const getByPage = (searchDto) => {\r\n  var url = ConstantList.API_ENPOINT + \"/api/AdministrativeUnit/searchByDto\" ;\r\n  return axios.post(url, searchDto);\r\n};\r\n\r\nexport const checkCode = (id, code) => {\r\n  const config = { params: {id: id, code: code } };\r\n  var url = ConstantList.API_ENPOINT+\"/api/AdministrativeUnit/checkCode\";\r\n  return axios.get(url, config);\r\n};\r\n\r\nexport const getByPage1 = (searchDto) => {\r\n  var url = ConstantList.API_ENPOINT + \"/api/administrativeunit\" \r\n  return axios.get(url, searchDto);\r\n};\r\n\r\nexport const getUserById = id => {\r\n  var url = ConstantList.API_ENPOINT+ \"/api/administrativeunit/\" + id;\r\n  return axios.get(url);\r\n};\r\nexport const deleteAdministrativeUnit = id => {\r\n  return axios.delete(ConstantList.API_ENPOINT + \"/api/administrativeunit/\" + id);\r\n};\r\nexport const addNewAdministrativeUnit = adminUnit => {\r\n  return axios.post(ConstantList.API_ENPOINT + \"/api/administrativeunit\", adminUnit);\r\n};\r\nexport const updateAdministrativeUnit = adminUnit => {\r\n\r\n  return axios.post(ConstantList.API_ENPOINT + \"/api/administrativeunit\", adminUnit);\r\n};\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  FormControlLabel,\r\n  Switch,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions, Icon, IconButton\r\n} from \"@material-ui/core\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport { getUserById, updateUser, addNewAdministrativeUnit,updateAdministrativeUnit, checkCode } from \"./AdministrativeUnitService\";\r\nimport { generateRandomId } from \"utils\";\r\nimport Draggable from 'react-draggable';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../../styles/views/_loadding.scss';\r\nimport '../../../styles/views/_style.scss';\r\n\r\nimport clsx from 'clsx';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\ntoast.configure({\r\n  autoClose: 1000,\r\n  draggable: false,\r\n  limit:3\r\n});\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nclass AdministrativeUnitEditorDialog extends Component {\r\n  state = {\r\n    name: \"\",\r\n    code: \"\",\r\n    level:0,\r\n    isActive: false,\r\n    loading:false\r\n  };\r\n\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n  openCircularProgress = () => {\r\n    this.setState({ loading: true });\r\n  };\r\n\r\n  handleFormSubmit = async () => {\r\n    await this.openCircularProgress();\r\n    let { id, code } = this.state;\r\n    let { t } = this.props;\r\n    checkCode(id, code).then((result) => {\r\n      //Nếu trả về true là code đã được sử dụng\r\n      if (result.data) {\r\n        console.log(\"Code đã được sử dụng\");\r\n        toast.warning(t('mess_code'));\r\n        this.setState({loading:false})\r\n      } else {\r\n        if (id) {\r\n          updateAdministrativeUnit({\r\n            ...this.state\r\n          }).then(() => {\r\n            toast.success(t('mess_edit'));\r\n            this.setState({loading:false})\r\n          });\r\n        } else {\r\n          addNewAdministrativeUnit({\r\n            ...this.state\r\n          }).then((response) => {\r\n            if(response.data != null && response.status == 200){\r\n              this.state.id = response.data.id\r\n              this.setState({...this.state, loading:false})\r\n              toast.success(t('mess_add'));\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  componentWillMount() {\r\n    //getUserById(this.props.uid).then(data => this.setState({ ...data.data }));\r\n    let { open, handleClose,item } = this.props;\r\n    this.setState(item);\r\n  }\r\n\r\n  render() {\r\n    let { open, handleClose, handleOKEditClose, t, i18n } = this.props;\r\n    let {\r\n      id,\r\n      name,\r\n      code,\r\n      level,\r\n      isActive,\r\n      loading\r\n    } = this.state;\r\n    return (\r\n      <Dialog open={open} PaperComponent={PaperComponent} maxWidth={'sm'} fullWidth={true}>\r\n        <div className={clsx(\"wrapperButton\", !loading && 'hidden')} >\r\n          <CircularProgress className=\"buttonProgress\" size={24} />\r\n        </div>\r\n        <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n        <span className=\"mb-20 styleColor\" > {(id ? t(\"update\") : t(\"Add\")) + \" \" + t(\"AdministrativeUnit.title\")} </span>\r\n        <IconButton style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }} onClick={() => handleClose()}><Icon color=\"error\"\r\n              title={t(\"close\")}>\r\n              close\r\n            </Icon>\r\n            </IconButton>\r\n        </DialogTitle>\r\n          <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit} style={{\r\n            overflowY: \"auto\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\"\r\n          }}>\r\n          <DialogContent dividers>\r\n          <Grid className=\"\" container spacing={4}>\r\n              <Grid item sm={12} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 mb-16\"\r\n                  label={<span className=\"font\">\r\n                      <span style={{ color: \"red\" }}> *</span>\r\n                      { t('AdministrativeUnit.code')}\r\n                    </span>\r\n                   }\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"code\"\r\n                  value={code}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n                <TextValidator\r\n                  className=\"w-100 mb-16\"\r\n                  label={ <span className=\"font\">\r\n                    <span style={{ color: \"red\" }}> *</span>\r\n                    {t('AdministrativeUnit.name')}\r\n                  </span>}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n                {/* <TextValidator\r\n                  className=\"w-100 mb-16\"\r\n                  label=\"Level\"\r\n                  onChange={this.handleChange}\r\n                  type=\"number\"\r\n                  name=\"level\"\r\n                  value={level}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[t(\"general.errorMessages_required\")]}\r\n                /> */}\r\n              </Grid>\r\n              {/* <Grid>\r\n                <FormControlLabel\r\n                  className=\"my-20\"\r\n                  control={\r\n                    <Switch\r\n                      checked={isActive}\r\n                      onChange={event => this.handleChange(event, \"switch\")}\r\n                    />\r\n                  }\r\n                  label=\"Active Customer\"\r\n                />\r\n              </Grid> */}\r\n            </Grid>\r\n \t        </DialogContent>\r\n            \r\n\r\n           <DialogActions spacing={4} className=\"flex flex-end flex-middle\">\r\n            <Button \r\n                variant=\"contained\" \r\n                color=\"secondary\" \r\n                onClick={() => this.props.handleClose()}>\r\n                  {t('Cancel')}\r\n              </Button>\r\n              <Button \r\n                variant=\"contained\"    \r\n                color=\"primary\" \r\n                type=\"submit\">\r\n                  {t('Save')}\r\n              </Button>\r\n            </DialogActions>\r\n          </ValidatorForm>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AdministrativeUnitEditorDialog;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\n// import \"react-tabulator/lib/styles.css\"; // default theme\r\nimport \"react-tabulator/lib/css/bootstrap/tabulator_bootstrap.min.css\"; // use Theme(s)\r\n\r\n// for React 16.4.x use: import { ReactTabulator }\r\n//import { React15Tabulator } from \"react-tabulator\"; // for React 15.x\r\nimport { React15Tabulator, reactFormatter } from \"react-tabulator\"; // for React 15.x\r\n\r\nimport { saveAs } from 'file-saver';\r\nimport { getAllAdministrativeUnits, deleteAdministrativeUnit, getByPage } from \"./AdministrativeUnitService\";\r\nimport AdministrativeUnitEditorDialog from \"./AdministrativeUnitEditorDialog\";\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport ConstantList from \"../../appConfig\";\r\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\r\nimport {\r\n  IconButton,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Icon,\r\n  TablePagination,\r\n  TableContainer,\r\n  Button,\r\n  Card\r\n} from \"@material-ui/core\";\r\nconst columns = [\r\n  { title: \"Name\", field: \"name\", width: \"20%\"},\r\n  { title: \"Age\", field: \"age\", align: \"left\", formatter: \"progress\" , width: \"20%\" },\r\n  { title: \"Favourite Color\", field: \"col\" , width: \"20%\"  },\r\n  { title: \"Date Of Birth\", field: \"dob\", align: \"center\" , width: 150 },\r\n  { title: \"Rating\", field: \"rating\", align: \"center\", formatter: \"star\" , width: 150 },\r\n  { title: \"Passed?\", field: \"passed\", align: \"center\", formatter: \"tickCross\" , width: 150 }\r\n];\r\n// const columns = [\r\n//   { title: \"Name\", field: \"name\", width: \"30%\"},\r\n//   { title: \"Code\", field: \"code\", align: \"left\", formatter: \"progress\" , width: \"40%\" },\r\n//   { title: \"Level\", field: \"level\" , width: \"30%\"  },\r\n// ];\r\n\r\nfunction SimpleButton(props) {\r\n  const { t, i18n } = useTranslation();\r\n  const cellData = props.cell._cell.row.data;\r\n  return <div> \r\n    <button onClick={() => props.onSelect(cellData,0)}>{t(\"Edit\")}</button> \r\n    <button onClick={() => props.onSelect(cellData,1)}>{t(\"Delete\")}</button> \r\n    </div>;\r\n}\r\n\r\n// function GetColumns(){\r\n//   const { t, i18n } = useTranslation();\r\n//   const columns = [\r\n//     { title: t(\"Name\"), field: \"name\", width: \"150\"},\r\n//     { title: t(\"Code\"), field: \"code\", align: \"left\", width: \"150\"},\r\n//     { title: t(\"Level\"), field: \"level\", width: \"150\"},\r\n//     { title: t(\"IsActive\"), field: \"isActive\", width: \"20%\"},\r\n//     {\r\n//       title: t(\"Action\"),\r\n//       field: \"custom\",\r\n//       align: \"left\",\r\n//       width: \"250\",\r\n//       formatter: reactFormatter(\r\n//         <SimpleButton\r\n//           onSelect={(item, method) => {\r\n//             if(method===0){\r\n//               this.setState({ selectedItem: item, shouldOpenEditorDialog: true});\r\n//             }else {\r\n//               this.handleDeleteAdministrativeUnit(item.id);\r\n//             }\r\n//           }}\r\n//         />\r\n//       )\r\n//     }\r\n//   ];\r\n//   return columns;\r\n// }\r\nfunction DeleteData(cellData){\r\n  alert(cellData.id);\r\n}\r\nconst data = [\r\n  {\r\n    id: 1,\r\n    name: \"Oli Bob\",\r\n    age: \"12\",\r\n    col: \"red\",\r\n    dob: \"\",\r\n    rating: 5,\r\n    passed: true\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Mary May\",\r\n    age: \"1\",\r\n    col: \"green\",\r\n    dob: \"14/05/1989\",\r\n    rating: 4,\r\n    passed: true\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Christine Lobowski\",\r\n    age: \"42\",\r\n    col: \"green\",\r\n    dob: \"22/05/1985\",\r\n    rating: 4,\r\n    passed: false\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Brendon Philips\",\r\n    age: \"125\",\r\n    col: \"red\",\r\n    dob: \"01/08/1980\",\r\n    rating: 4.5,\r\n    passed: true\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Margret Marmajuke\",\r\n    age: \"16\",\r\n    col: \"yellow\",\r\n    dob: \"31/01/1999\",\r\n    rating: 4,\r\n    passed: false\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"Van Ng\",\r\n    age: \"37\",\r\n    col: \"green\",\r\n    dob: \"06/15/1982\",\r\n    rating: 4,\r\n    passed: true\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"Duc Ng\",\r\n    age: \"37\",\r\n    col: \"yellow\",\r\n    dob: \"10/15/1982\",\r\n    rating: 4,\r\n    passed: true\r\n  }\r\n];\r\n\r\n// Editable Example:\r\nconst colorOptions = {\r\n  [\"\"]: \"&nbsp;\",\r\n  red: \"red\",\r\n  green: \"green\",\r\n  yellow: \"yellow\"\r\n};\r\nconst editableColumns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    width: 150,\r\n    editor: \"input\",\r\n    headerFilter: \"input\"\r\n  },\r\n  {\r\n    title: \"Age\",\r\n    field: \"age\",\r\n    align: \"left\",\r\n    formatter: \"progress\",\r\n    editor: \"progress\"\r\n  },\r\n  {\r\n    title: \"Favourite Color\",\r\n    field: \"col\",\r\n    editor: \"autocomplete\",\r\n    editorParams: {\r\n      allowEmpty: true,\r\n      showListOnEmpty: true,\r\n      values: colorOptions\r\n    },\r\n    headerFilter: \"select\",\r\n    headerFilterParams: { values: colorOptions }\r\n  },\r\n  { title: \"Date Of Birth\", field: \"dob\", align: \"center\", editor: \"input\" },\r\n  {\r\n    title: \"Rating\",\r\n    field: \"rating\",\r\n    align: \"center\",\r\n    formatter: \"star\",\r\n    editor: true\r\n  },\r\n  {\r\n    title: \"Passed?\",\r\n    field: \"passed\",\r\n    align: \"center\",\r\n    formatter: \"tickCross\",\r\n    editor: true\r\n  }\r\n];\r\n\r\nclass React15TabulatorSample extends React.Component {\r\n  ref = null;\r\n  state = {\r\n    rowsPerPage: 3,\r\n    page: 0,\r\n    data: [],\r\n    totalElements:0,\r\n    administrativeList: [],\r\n    shouldOpenEditorDialog: false,\r\n    shouldOpenConfirmationDialog: false\r\n  };\r\n  SimpleButton=(props)=>{\r\n    const cellData = props.cell._cell.row.data;\r\n    return <div> \r\n      <button onClick={() => props.onSelect(cellData,0)}>Edit</button> \r\n      <button onClick={() => props.onSelect(cellData,1)}>Delete</button> \r\n      </div>;\r\n  }\r\n  setPage = page => {\r\n    this.setState({ page });\r\n  };\r\n\r\n  setRowsPerPage = event => {\r\n    this.setState({ rowsPerPage: event.target.value, page:0});\r\n    this.updatePageData(0,event.target.value);\r\n  };\r\n\r\n  handleChangePage = (event, newPage) => {\r\n    this.setPage(newPage);\r\n    //alert(newPage+\"/\"+this.state.page);\r\n    this.updatePageData(newPage,this.state.rowsPerPage);\r\n  };\r\n  handleDownload = () => {\r\n    var blob = new Blob([\"Hello, world!\"], {type: \"text/plain;charset=utf-8\"});\r\n    saveAs(blob, \"hello world.txt\");    \r\n  }\r\n  handleDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenEditorDialog: false,\r\n      shouldOpenConfirmationDialog: false\r\n    });\r\n    this.setPage(0);\r\n    this.updatePageData(this.state.page,this.state.rowsPerPage);\r\n  };\r\n\r\n  handleDeleteAdministrativeUnit = id => {\r\n    this.setState({\r\n      id,\r\n      shouldOpenConfirmationDialog: true\r\n    });\r\n  };\r\n\r\n  handleConfirmationResponse = () => {\r\n    //alert(this.state.id);\r\n    deleteAdministrativeUnit(this.state.id).then(() => {\r\n      this.handleDialogClose();\r\n    });\r\n  };\r\n  handleEditItem = item => {\r\n    this.setState({\r\n      item:item,\r\n      shouldOpenEditorDialog: true\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    this.updatePageData(this.state.page,this.state.rowsPerPage);\r\n  }\r\n\r\n  updatePageData = (pageIndex, pageSize) => { \r\n    getByPage(pageIndex,pageSize).then(({ data }) => this.setState({\r\n       administrativeList: [...data.content], totalElements:data.totalElements\r\n      }));\r\n  };\r\n\r\n\r\n\r\n  rowClick = (e, row) => {\r\n    console.log(\"ref table: \", this.ref.table); // this is the Tabulator table instance\r\n    console.log(\"rowClick id: ${row.getData().id}\", row, e);\r\n  };\r\n\r\n  setData = () => {\r\n    this.setState({ data:this.state.administrativeList });\r\n  };\r\n\r\n  clearData = () => {\r\n    this.setState({ data: [] });\r\n  };\r\n  GetColumns = (col)=>{\r\n    return col;\r\n  } \r\n  \r\n\r\n  rowClick = (e, row) => {\r\n    //alert(row.getData().name);\r\n    this.setState({item:row.getData()});\r\n    console.log(\"ref table: \", this.ref.table); // this is the Tabulator table instance\r\n    console.log(\"rowClick id: ${row.getData().id}\", row, e);\r\n    this.setState({ selectedName: row.getData().name });\r\n  };\r\n  render() {\r\n    const { t, i18n } = this.props;\r\n    let columns = [\r\n      { title: t(\"Name\"), field: \"name\", width: \"150\"},\r\n      { title: t(\"Code\"), field: \"code\", align: \"left\", width: \"150\"},\r\n      { title: t(\"Level\"), field: \"level\", width: \"150\"},\r\n      { title: t(\"IsActive\"), field: \"isActive\", width: \"20%\"},\r\n      {\r\n        title: t(\"Action\"),\r\n        field: \"custom\",\r\n        align: \"left\",\r\n        width: \"250\",\r\n        formatter: reactFormatter(\r\n          <SimpleButton\r\n            onSelect={(item, method) => {\r\n              if(method===0){\r\n                this.setState({ selectedItem: item, shouldOpenEditorDialog: true});\r\n              }else {\r\n                this.handleDeleteAdministrativeUnit(item.id);\r\n              }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    ];\r\n    const options = {\r\n      height: \"90%\",\r\n      movableRows: false\r\n    };\r\n  let {\r\n      rowsPerPage,\r\n      page,\r\n      administrativeList,\r\n      shouldOpenConfirmationDialog,\r\n      shouldOpenEditorDialog\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        <Button\r\n          className=\"mb-16\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => this.setState({ shouldOpenEditorDialog: true,item:{} })}\r\n        >\r\n          {t('AdministrativeUnitTable.AddNew')}\r\n        </Button>          \r\n          {shouldOpenEditorDialog && (\r\n            <AdministrativeUnitEditorDialog\r\n              handleClose={this.handleDialogClose}\r\n              open={this.state.shouldOpenEditorDialog}\r\n              item={this.state.item}\r\n            />\r\n          )}   \r\n          \r\n          {shouldOpenConfirmationDialog && (\r\n            <ConfirmationDialog\r\n              open={shouldOpenConfirmationDialog}\r\n              onConfirmDialogClose={this.handleDialogClose}\r\n              onYesClick={this.handleConfirmationResponse}\r\n              text=\"Are you sure to delete?\"\r\n            />\r\n          )\r\n          }     \r\n        <React15Tabulator\r\n          ref={ref => (this.ref = ref)}\r\n          columns={columns}\r\n          data={administrativeList}\r\n          rowClick={this.rowClick}\r\n          options={options}\r\n          data-custom-attr=\"test-custom-attribute\"\r\n          className=\"custom-css-class\"\r\n          resizableColumns=\"false\" movableColumns=\"false\" scrollToColumnIfVisible=\"true\" selectableRollingSelection=\"false\"\r\n          //min-width=\"750px\"\r\n        />\r\n        {/* <Pagination/> */}\r\n      \r\n          <TablePagination\r\n            align=\"left\"\r\n            className=\"px-16\"\r\n            rowsPerPageOptions={[1,2,3,5, 10, 25]}\r\n            component=\"div\"\r\n            count={this.state.totalElements}\r\n            rowsPerPage={this.state.rowsPerPage}\r\n            page={this.state.page}\r\n            backIconButtonProps={{\r\n              \"aria-label\": \"Previous Page\"\r\n            }}\r\n            nextIconButtonProps={{\r\n              \"aria-label\": \"Next Page\"\r\n            }}\r\n            onChangePage={this.handleChangePage}\r\n            onChangeRowsPerPage={this.setRowsPerPage}\r\n          />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default React15TabulatorSample;\r\n"],"sourceRoot":""}